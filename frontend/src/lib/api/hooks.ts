/*
This file is Exports hooks for OpenAPI endpoints using the api client.
It is most certain that this file is not bugged.
Do not edit this file manually.
*/

import { api } from './openapi';
import { components } from './schema';

// Auth hooks

// POST /auth/verify
export function useLogin(): {
  data: components['schemas']['TokenVerificationResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("post", "/auth/verify", {});
  
  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Login failed') : null,
    refetch: result.refetch
  };
}

// POST /auth/signup
export function useSignup(): {
  mutate: (variables: { body: components['schemas']['SignUpBody'] }) => void,
  mutateAsync: (variables: { body: components['schemas']['SignUpBody'] }) => Promise<components['schemas']['SignUpResponse']>,
  data: components['schemas']['SignUpResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/auth/signup");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Signup failed') : null
  };
}

// POST /auth/signup/verify
export function useVerifySignUpProvider(): {
  mutate: (variables: { body: components['schemas']['VerifySignUpProviderBody'] }) => void,
  mutateAsync: (variables: { body: components['schemas']['VerifySignUpProviderBody'] }) => Promise<components['schemas']['SignUpResponse']>,
  data: components['schemas']['SignUpResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/auth/signup/verify");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Verification failed') : null
  };
}

// PATCH /auth/change-password
export function useChangePassword(): {
  mutate: (variables: { body: Record<string, never> }) => void,
  mutateAsync: (variables: { body: Record<string, never> }) => Promise<components['schemas']['ChangePasswordResponse']>,
  data: components['schemas']['ChangePasswordResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("patch", "/auth/change-password");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Password change failed') : null
  };
}

// Course hooks

// POST /courses/
export function useCreateCourse(): {
  mutate: (variables: { body: components['schemas']['CreateCourseBody'] }) => void,
  mutateAsync: (variables: { body: components['schemas']['CreateCourseBody'] }) => Promise<components['schemas']['CourseDataResponse']>,
  data: components['schemas']['CourseDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Course creation failed') : null
  };
}

// GET /courses/{id}
export function useCourseById(id: string): { 
  data: components['schemas']['CourseDataResponse'] | undefined, 
  isLoading: boolean, 
  error: string | null, 
  refetch: () => void 
} {
  const result = api.useQuery("get", "/courses/{id}", { 
    params: { path: { id } }
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch course') : null,
    refetch: result.refetch
  };
}

// PUT /courses/{id}
export function useUpdateCourse(): {
  mutate: (variables: { params: { path: { id: string } }, body: components['schemas']['UpdateCourseBody'] }) => void,
  mutateAsync: (variables: { params: { path: { id: string } }, body: components['schemas']['UpdateCourseBody'] }) => Promise<components['schemas']['CourseDataResponse']>,
  data: components['schemas']['CourseDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/{id}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Course update failed') : null
  };
}

// Course Version hooks

// POST /courses/{id}/versions
export function useCreateCourseVersion(): {
  mutate: (variables: { params: { path: { id: string } }, body: components['schemas']['CreateCourseVersionBody'] }) => void,
  mutateAsync: (variables: { params: { path: { id: string } }, body: components['schemas']['CreateCourseVersionBody'] }) => Promise<Record<string, never>>,
  data: Record<string, never> | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/{id}/versions");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Course version creation failed') : null
  };
}

// GET /courses/versions/{id}
export function useCourseVersionById(id: string): {
  data: Record<string, never> | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/courses/versions/{id}", {
    params: { path: { id } }
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch course version') : null,
    refetch: result.refetch
  };
}

// DELETE /courses/{courseId}/versions/{versionId}
export function useDeleteCourseVersion(): {
  mutate: (variables: { params: { path: { courseId: string, versionId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { courseId: string, versionId: string } } }) => Promise<components['schemas']['DeleteCourseVersionParams']>,
  data: components['schemas']['DeleteCourseVersionParams'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("delete", "/courses/{courseId}/versions/{versionId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Course version deletion failed') : null
  };
}

// Module hooks

// POST /courses/versions/{versionId}/modules
export function useCreateModule(): {
  mutate: (variables: { params: { path: { versionId: string } }, body: components['schemas']['CreateModuleBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string } }, body: components['schemas']['CreateModuleBody'] }) => Promise<components['schemas']['ModuleDataResponse']>,
  data: components['schemas']['ModuleDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/versions/{versionId}/modules");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Module creation failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}
export function useUpdateModule(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['UpdateModuleBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['UpdateModuleBody'] }) => Promise<components['schemas']['ModuleDataResponse']>,
  data: components['schemas']['ModuleDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Module update failed') : null
  };
}

// DELETE /courses/versions/{versionId}/modules/{moduleId}
export function useDeleteModule(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string } } }) => Promise<components['schemas']['ModuleDeletedResponse']>,
  data: components['schemas']['ModuleDeletedResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("delete", "/courses/versions/{versionId}/modules/{moduleId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Module deletion failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/move
export function useMoveModule(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['MoveModuleBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['MoveModuleBody'] }) => Promise<components['schemas']['ModuleDataResponse']>,
  data: components['schemas']['ModuleDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/move");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Module move failed') : null
  };
}

// Section hooks

// POST /courses/versions/{versionId}/modules/{moduleId}/sections
export function useCreateSection(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['CreateSectionBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string } }, body: components['schemas']['CreateSectionBody'] }) => Promise<components['schemas']['SectionDataResponse']>,
  data: components['schemas']['SectionDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/versions/{versionId}/modules/{moduleId}/sections");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Section creation failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}
export function useUpdateSection(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['UpdateSectionBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['UpdateSectionBody'] }) => Promise<components['schemas']['SectionDataResponse']>,
  data: components['schemas']['SectionDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Section update failed') : null
  };
}

// DELETE /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}
export function useDeleteSection(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } } }) => Promise<components['schemas']['SectionDeletedResponse']>,
  data: components['schemas']['SectionDeletedResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("delete", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Section deletion failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/move
export function useMoveSection(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['MoveSectionBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['MoveSectionBody'] }) => Promise<components['schemas']['SectionDataResponse']>,
  data: components['schemas']['SectionDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/move");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Section move failed') : null
  };
}

// Item hooks

// GET /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items
export function useAllItems(versionId: string, moduleId: string, sectionId: string): {
  data: components['schemas']['ItemDataResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items", {
    params: { path: { versionId, moduleId, sectionId } }
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch items') : null,
    refetch: result.refetch
  };
}

// POST /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items
export function useCreateItem(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['CreateItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string } }, body: components['schemas']['CreateItemBody'] }) => Promise<components['schemas']['ItemDataResponse']>,
  data: components['schemas']['ItemDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Item creation failed') : null
  };
}

// GET /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}
export function useItemById(versionId: string, moduleId: string, sectionId: string, itemId: string): {
  data: components['schemas']['ItemDataResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}", {
    params: { path: { versionId, moduleId, sectionId, itemId } }
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch item') : null,
    refetch: result.refetch
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}
export function useUpdateItem(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string, itemId: string } }, body: components['schemas']['UpdateItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string, itemId: string } }, body: components['schemas']['UpdateItemBody'] }) => Promise<components['schemas']['ItemDataResponse']>,
  data: components['schemas']['ItemDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Item update failed') : null
  };
}

// DELETE /courses/itemGroups/{itemsGroupId}/items/{itemId}
export function useDeleteItem(): {
  mutate: (variables: { params: { path: { itemsGroupId: string, itemId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { itemsGroupId: string, itemId: string } } }) => Promise<components['schemas']['DeletedItemResponse']>,
  data: components['schemas']['DeletedItemResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("delete", "/courses/itemGroups/{itemsGroupId}/items/{itemId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Item deletion failed') : null
  };
}

// PUT /courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}/move
export function useMoveItem(): {
  mutate: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string, itemId: string } }, body: components['schemas']['MoveItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { versionId: string, moduleId: string, sectionId: string, itemId: string } }, body: components['schemas']['MoveItemBody'] }) => Promise<components['schemas']['ItemDataResponse']>,
  data: components['schemas']['ItemDataResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("put", "/courses/versions/{versionId}/modules/{moduleId}/sections/{sectionId}/items/{itemId}/move");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Item move failed') : null
  };
}

// Enrollment hooks

// POST /users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}
export function useEnrollUser(): {
  mutate: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } } }) => Promise<components['schemas']['EnrollUserResponseData']>,
  data: components['schemas']['EnrollUserResponseData'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Enrollment failed') : null
  };
}

// POST /users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}/unenroll
export function useUnenrollUser(): {
  mutate: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } } }) => void,
  mutateAsync: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } } }) => Promise<components['schemas']['EnrollUserResponseData']>,
  data: components['schemas']['EnrollUserResponseData'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/users/{userId}/enrollments/courses/{courseId}/versions/{courseVersionId}/unenroll");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Unenrollment failed') : null
  };
}

// GET /users/{userId}/enrollments
export function useUserEnrollments(userId: string, page?: number): {
  data: components['schemas']['EnrollmentResponse'] | undefined, 
  isLoading: boolean, 
  error: string | null, 
  refetch: () => void
} {
  const result = api.useQuery("get", "/users/{userId}/enrollments", {
    params: {
      path: { userId },
      query: { page }
    }
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'An error occurred') : null,
    refetch: result.refetch
  };
}

// Progress hooks

// GET /users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/
export function useUserProgress(userId: string, courseId: string, courseVersionId: string): {
  data: components['schemas']['ProgressDataResponse'] | undefined,
  isLoading: boolean,
  error: string | null,
  refetch: () => void
} {
  const result = api.useQuery("get", "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/", {
    params: { path: { userId, courseId, courseVersionId } }
  });

  return {
    data: result.data,
    isLoading: result.isLoading,
    error: result.error ? (result.error.message || 'Failed to fetch progress') : null,
    refetch: result.refetch
  };
}

// POST /users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/start
export function useStartItem(): {
  mutate: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['StartItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['StartItemBody'] }) => Promise<components['schemas']['StartItemResponse']>,
  data: components['schemas']['StartItemResponse'] | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/start");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Start item failed') : null
  };
}

// POST /users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/stop
export function useStopItem(): {
  mutate: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['StopItemBody'] }) => void,
  mutateAsync: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['StopItemBody'] }) => Promise<unknown>,
  data: unknown | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("post", "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/stop");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Stop item failed') : null
  };
}

// PATCH /users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/update
export function useUpdateCourseProgress(): {
  mutate: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['UpdateProgressBody'] }) => void,
  mutateAsync: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['UpdateProgressBody'] }) => Promise<unknown>,
  data: unknown | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("patch", "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/update");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Progress update failed') : null
  };
}

// PATCH /users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/reset
export function useResetCourseProgress(): {
  mutate: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['ResetCourseProgressBody'] }) => void,
  mutateAsync: (variables: { params: { path: { userId: string, courseId: string, courseVersionId: string } }, body: components['schemas']['ResetCourseProgressBody'] }) => Promise<unknown>,
  data: unknown | undefined,
  error: string | null,
  isPending: boolean,
  isSuccess: boolean,
  isError: boolean,
  isIdle: boolean,
  reset: () => void,
  status: 'idle' | 'pending' | 'success' | 'error'
} {
  const result = api.useMutation("patch", "/users/{userId}/progress/courses/{courseId}/versions/{courseVersionId}/reset");
  return {
    ...result,
    error: result.error ? (result.error.message || 'Progress reset failed') : null
  };
}

// Legacy hooks for backwards compatibility
export function useCourses(id: string): unknown {
  return useCourseById(id);
}